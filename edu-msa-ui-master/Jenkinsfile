pipeline {
  agent any

   environment {
    dockerHubRegistry = 'seunghyejeong/project'
    dockerHubRegistryCredential = 'seunghyejeong'
  }


 tools {
        maven 'maven' 
    }
  stages {

    stage('Checkout Application Git Branch') {
        steps {
            git url: 'https://github.com/jeongbami/gitops-repository.git', branch: 'main'
        }
        post {
                failure {
                  echo 'Repository clone failure !'
                }
                success {
                  echo 'Repository clone success !'
                }
        }
    }
    stage('Maven Jar Build') {
        steps {
            sh 'mvn -f /var/jenkins_home/workspace/test/edu-msa-ui-master clean package'
        }
        post {
                failure {
                  echo 'Maven jar build failure !'
                }
                success {
                  echo 'Maven jar build success !'
                }
        }
    }
    stage('Docker Image Build') {
        steps {
	    sh "cp /var/jenkins_home/workspace/test/edu-msa-ui-masteri/target/ROOT.jar ./"
            sh "cp /var/jenkins_home/workspace/test/edu-msa-ui-master/Dockerfile ./"
            sh "docker build . -t ${dockerHubRegistry}:${currentBuild.number}"
            sh "docker build . -t ${dockerHubRegistry}:latest"
        }
        post {
                failure {
                  echo 'Docker image build failure !'
                }
                success {
                  echo 'Docker image build success !'
                }
        }
    }
    stage('Docker Image Push') {
        steps {
            withDockerRegistry([ credentialsId: dockerHubRegistryCredential, url: "https://index.docker.io/v1/" ]) {
                                sh "docker push ${dockerHubRegistry}:${currentBuild.number}"
                                sh "docker push ${dockerHubRegistry}:latest"

                                sleep 10 /* Wait uploading */ 
                            }
        }
        post {
                failure {
                  echo 'Docker Image Push failure !'
                  sh "docker rmi ${dockerHubRegistry}:${currentBuild.number}"
                  sh "docker rmi ${dockerHubRegistry}:latest"
                }
                success {
                  echo 'Docker image push success !'
                  sh "docker rmi ${dockerHubRegistry}:${currentBuild.number}"
                  sh "docker rmi ${dockerHubRegistry}:latest"
                }
        }
     }

    }
  }
